#!/bin/sh

logger wifi new status request %1

#cfg=/cfg/auth/wifi.cfg
cfg=/home/bin/mnt/wifi/wifi.cfg

if [ "$iface" = "" ]; then
iface=wlan0
fi 


wifi_stop() {
 ifconfig $iface down 
 #killall wpa_supplicant
 ps=`ps -ef | grep wpa_supplicant | grep $iface  | grep -v grep | awk '{print $2}'`
 if [ "$ps" != "" ]; then
    kill -9 $ps
    fi
 dhcpcd -kill $iface
}

wifi_start() {
if [ "$1" = "" ]; then
 c=$cfg
else
 c=/home/bin/mnt/wifi/$1
fi

 ifconfig $iface up
 if [ "$?" = "0" ]; then
 echo "$iface -> starting wpa and dhcpcd cfg=$c..."
 wpa_supplicant -i$iface -c$c -B 
 sleep 1
 msg=` (dhcpcd --allowinterfaces $iface $iface 2>&1)  | grep leased`
 #msg="YES"
 wname=`iwconfig $iface | grep ESSID|awk '{print $4}'`
 notify-send "$wname" "$msg"
 echo nameserver 8.8.8.8 >> /etc/resolv.conf
 fi
}

state="undefined"

wifi_state() {
state=$(cat /sys/class/rfkill/rfkill2/state)
echo wifi state $state now
}

wifi_reset() {
wifi_state;
#state=$(cat /sys/class/rfkill/rfkill2/state)
echo RF state $state
case "$state" in
 "1")
     echo reset wifi $iface connection rf:$state
     wifi_stop; 
     wifi_start;
 ;;
 *)
     wifi_stop;
  ;;
esac
}

case "$1" in
 clone)
   echo "create new iface wlan1 (managed)"
     #iw phy phy0 interface add wlan0 type __ap
   iw phy phy0 interface add wlan1 type managed
 ;;
 share)
   echo stopping $iface
   wifi_stop
   echo config vHome3 network on $iface
   iwconfig $iface essid vHome3 mode ad-hoc  channel 4
   ch=$2
   if [ "$2" = "" ]; then
     ifconfig $iface 192.168.7.1/24 up
     echo start dnsmasq for server 192.168.7.1/24
     dnsmasq -C /home/bin/wifi.dnsmasq
     echo start NAT
     echo 1 > /proc/sys/net/ipv4/ip_forward
     iptables -t nat -A POSTROUTING --out-interface eth0 -j MASQUERADE
     echo OK
   else
     echo start client on $iface
     if [ "$ch" = "dhcp" ] ; then
       dhcpcd $iface
     else
       ifconfig $iface 192.168.7.$ch up
     fi
     echo OK
   fi
   ;;
 stop)
   echo stopping NAT 
   echo 0 > /proc/sys/net/ipv4/ip_forward
   echo kill dns-masg
   killall2 dnsmasq
  wifi_stop
  ;;
 start)
  wifi_start $2
  ;;
 restart)
  wifi_stop
  sleep 1
  wifi_start $2
  ;;
  reset)
  wifi_reset
  ;;
  state)
  wifi_state
   ;;
  scan)
  iwlist $iface scan | grep ESSID
  ;;
 *)
  echo "usage: start|stop|restart|reset"
  exit 1
  ;;
esac


